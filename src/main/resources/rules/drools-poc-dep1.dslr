package rules.dep1_tri

import alien4cloud.rules.RuleTrigger
import alien4cloud.rules.RuleTriggerStatus
import alien4cloud.rules.MetricEvent
import java.util.Date
import java.util.Calendar

expander drools-poc.dsl

declare TemporalWindowPolicy
    @role( event )
    @timestamp( timestamp )
    timestamp : Date
    deploymentId: String
    // Rule TTL
    @expires( 3m )
end

// [[ Dep1
rule "Dep1: Temporal rule"
    salience 10
    timer ( cron: 0 0/5 * * * ? )
	when
	    // Here can come some additionnal scheduling condition (open days ...)
	    // Cf. scheduleConditions
	then
		insert(new RuleTrigger("Dep1", "Execute 'run' workflow", Calendar.MINUTE, 3));
		TemporalWindowPolicy temporalPolicy = new TemporalWindowPolicy();
		temporalPolicy.setTimestamp(new Date());
		temporalPolicy.setDeploymentId("Dep1");
		insert(temporalPolicy);
	end
rule "Dep1: Expire rule"
    activation-group "trigger-dep1"
    salience 10
	when
	    not TemporalWindowPolicy(deploymentId == "Dep1")
		$r: RuleTrigger(deploymentId == "Dep1", status == RuleTriggerStatus.SCHEDULED)
	then
		$r.setStatus(RuleTriggerStatus.DROPPED);
		update($r);
	end

rule "Sleepy K8S"
    activation-group "trigger-dep1"
    salience 9
	when
	    not RuleTrigger(deploymentId == "Dep1", status == RuleTriggerStatus.RUNNING)
	    $r: RuleTrigger(deploymentId == "Dep1", status == RuleTriggerStatus.SCHEDULED)
		La charge moyenne du cluster K8S est <= Ã  1
	then
		$r.setStatus(RuleTriggerStatus.TRIGGERED);
		update($r);
	end

rule "Main: Delete execution rule"
    salience 100
	when
	    $tickTocker: TickTocker()
		$r: RuleTrigger(status != RuleTriggerStatus.RUNNING && status != RuleTriggerStatus.SCHEDULED, $tickTocker.now > expirationTime)
	then
		delete($r);
	end


