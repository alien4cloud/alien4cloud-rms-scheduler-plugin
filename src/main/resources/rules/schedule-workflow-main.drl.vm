package rules

import org.alien4cloud.rmsscheduler.model.RuleTrigger
import org.alien4cloud.rmsscheduler.model.RuleTriggerStatus
import org.alien4cloud.rmsscheduler.model.MetricEvent
import org.alien4cloud.rmsscheduler.model.TickTocker
import java.util.Date
import java.util.Calendar

declare MetricEvent
    @role( event )
    @timestamp( timestamp )
    // Event TTL
    // Shloud be at least a plugin confiruration, but could also be embedded in Events (To Be Defined)
    @expires( $pluginConfiguration.metricEventTtl )
end
declare TickTocker
    @propertyReactive
    now : Date
end
declare RuleTrigger
    @propertyReactive
    status : RuleTriggerStatus
    ruleId: String
    environmentId: String
    deploymentId: String
    executionId: String
    action: String
    scheduleTime: Date
    expirationDelay: long
    expirationTime: Date
    maxRun: int
    runCount: int
end

rule "Main: Cancel schedule rule"
    salience 100
	when
	    $tickTocker: TickTocker()
		$r: RuleTrigger(status == RuleTriggerStatus.SCHEDULED, expirationDelay > 0 && $tickTocker.now > expirationTime)
	then
		modify($r) {
            setStatus(RuleTriggerStatus.DROPPED)
        }
	end

rule "Main: Timeout execution rule"
    salience 100
	when
	    $tickTocker: TickTocker()
		$r: RuleTrigger(status == RuleTriggerStatus.RUNNING, expirationDelay > 0 && $tickTocker.now > expirationTime)
	then
		modify($r) {
            setStatus(RuleTriggerStatus.TIMEOUT)
        }
	end

rule "Main: Delete execution rule"
    salience 100
	when
	    $tickTocker: TickTocker()
		$r: RuleTrigger(status != RuleTriggerStatus.RUNNING && status != RuleTriggerStatus.SCHEDULED, expirationDelay > 0 && $tickTocker.now > expirationTime)
	then
		delete($r);
	end

rule "Main: Delete DONE or ERROR rule"
    salience 1
	when
		$r: RuleTrigger(status == RuleTriggerStatus.DONE || status == RuleTriggerStatus.ERROR)
	then
		delete($r);
	end

