package rules

import org.alien4cloud.rmsscheduler.model.RuleTrigger
import org.alien4cloud.rmsscheduler.model.RuleTriggerStatus
import org.alien4cloud.rmsscheduler.model.RuleTriggerHeartbeat
import org.alien4cloud.rmsscheduler.model.timeline.TimelineRuleConditionEvent
import org.alien4cloud.rmsscheduler.model.timeline.TimelineAction
import org.alien4cloud.rmsscheduler.model.timeline.TimelineActionState
import org.alien4cloud.rmsscheduler.model.MetricEvent
import org.alien4cloud.rmsscheduler.model.TickTocker
import java.util.Date
import java.util.Calendar
import java.util.List

declare MetricEvent
    @role( event )
    @timestamp( timestamp )
    // Event TTL
    // Shloud be at least a plugin confiruration, but could also be embedded in Events (To Be Defined)
    @expires( $pluginConfiguration.metricEventTtl )
end
declare TickTocker
    @propertyReactive
    now : Date
end
declare RuleTrigger
    //@propertyReactive
    status : RuleTriggerStatus
    id: String @key
    ruleId: String
    environmentId: String
    deploymentId: String
    executionId: String
    action: String
    scheduleTime: Date
    expirationDelay: long
    expirationTime: Date
    maxRun: int
    runCount: int
    conditionsCount: int
end
declare RuleTriggerHeartbeat
	@role( event )
	//@propertyReactive
    id: long @key
    triggerId: String
    deploymentId: String
    ruleId: String
    remainingConditionsCount: int
end
declare TimelineAction
    id: String @key
    name: String
    triggerId: String
    executionId: String
    state: TimelineActionState
    endTime: Date
    deploymentId: String
    ruleId: String
    startTime: Date
    type: String
end
declare ConditionEvent
	@role( event )
    triggerId: String
    heartbeatId: long
    conditionIdx: int
    passed: boolean
end

rule "Main: Delete DONE or ERROR action"
    salience -200
	when
		$r: TimelineAction(state == TimelineActionState.DONE || state == TimelineActionState.ERROR || state == TimelineActionState.CANCELLED)
	then
		delete($r);
	end

rule "Main: Delete execution rule"
    salience -201
	when
	    $tickTocker: TickTocker()
		$r: RuleTrigger(expirationDelay > 0 && $tickTocker.now > expirationTime)
		not TimelineAction(triggerId == $r.id)
	then
		modify($r) {
            setStatus(RuleTriggerStatus.DROPPED)
        }
	end

rule "Main: Delete dropped trigger"
    salience -202
	when
		$r: RuleTrigger(status == RuleTriggerStatus.DROPPED)
	then
		delete($r);
	end

rule "Main: Delete RuleTriggerHeartbeat"
    salience -100
	when
		$tickTocker: TickTocker()
		$h: RuleTriggerHeartbeat(id == $tickTocker.getNow().getTime())
	then
		delete($h);
	end
